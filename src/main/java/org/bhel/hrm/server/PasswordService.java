package org.bhel.hrm.server;

import com.password4j.Password;

/**
 * A utility class for securely hashing and verifying passwords using the Password4j library.
 * This service automatically uses the best-configured algorithm from psw4j.properties (defaults to Argon2id).
 */
public class PasswordService {
    private PasswordService() {
        throw new UnsupportedOperationException("This class PasswordService is a utility class; it should not be instantiated.");
    }

    /**
     * Hashes a plain-text password using the default configured hashing algorithm (Argon2id).
     * The salt is automatically and securely generated by the library.
     *
     * @param plainTextPassword The password to hash.
     * @return The resulting hash string, which includes the algorithm, parameters, salt, and hash.
     */
    public static String hashPassword(String plainTextPassword) {
        return Password.hash(plainTextPassword).withArgon2().getResult();
    }

    /**
     * Verifies a plain-text password against a stored hash.
     * The library automatically detects the algorithm (BCrypt, Scrypt, Argon2id) from the hash string.
     *
     * @param plainTextPassword The password provided by the user during login.
     * @param storedHash The hash retrieved from the database.
     * @return true if the password matches the hash, false otherwise.
     */
    public static boolean checkPassword(String plainTextPassword, String storedHash) {
        if (plainTextPassword == null || storedHash == null)
            return false;

        return Password.check(plainTextPassword, storedHash).withArgon2();
    }
}
